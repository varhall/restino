<?phpnamespace Varhall\Restino\Controllers;use Nette\Application\IPresenter;use Nette\Application\Request;use Nette\Application\Response;use Nette\Application\Responses\JsonResponse;use Nette\Http\IResponse;use Varhall\Restino\Middlewares\Attributes\IMiddlewareAttribute;use Varhall\Restino\Middlewares\Chain;use Varhall\Restino\Middlewares\Factory;use Varhall\Restino\Results\Abort;use Varhall\Restino\Results\IResult;use Varhall\Restino\Results\Termination;use Varhall\Restino\Router\ActionRouter;abstract class RestController implements IPresenter{    protected ?\Nette\DI\Container $context;    protected ?\Nette\Routing\Router $router;    protected \Nette\Http\IRequest $httpRequest;    protected \Nette\Http\IResponse $httpResponse;    protected ?\Nette\Security\User $user = null;    protected Factory $middlewareFactory;    protected Chain $middlewares;    protected ActionRouter $actionRouter;    protected RestRequest $request;    public final function injectPrimary(        ?\Nette\DI\Container $context,        ?\Nette\Routing\Router $router,        \Nette\Http\IRequest $httpRequest,        \Nette\Http\IResponse $httpResponse,        Factory $middlewareFactory,        Chain $middlewares,        ActionRouter $actionRouter,        ?\Nette\Security\User $user = null,    ) {        $this->context = $context;        $this->router = $router;        $this->httpRequest = $httpRequest;        $this->httpResponse = $httpResponse;        $this->user = $user;        $this->middlewareFactory = $middlewareFactory;        $this->middlewares = $middlewares;        $this->actionRouter = $actionRouter;    }    public function setup(): void    {    }    public function invalid(): IResult    {        return new Termination([ 'message' => 'Action not found' ], IResponse::S404_NotFound);    }    public function run(Request $request): Response    {        $this->setup();        $action = $this->actionRouter->route($this, $request);        $result = $this->runAction($request, $action);        return new JsonResponse($result->execute($this->httpResponse));    }    private function runAction(Request $request, Action $action): IResult    {        $this->registerMiddlewareAttributes($action);        $run = function(RestRequest $request) use ($action): IResult {            try {                return $action->invoke($request);            } catch (Abort $abort) {                return $abort->getResult();            }        };        $method = $this->middlewares->chain($run, $action->getName());        return $method(new RestRequest($request));    }    private function registerMiddlewareAttributes(Action $action): void    {        $class = new \ReflectionClass($this);        $method = $action->getFunction();        $attributes = array_merge(            $class->getAttributes(IMiddlewareAttribute::class, \ReflectionAttribute::IS_INSTANCEOF),            $method->getAttributes(IMiddlewareAttribute::class, \ReflectionAttribute::IS_INSTANCEOF)        );        foreach ($attributes as $attribute) {            $middleware = $attribute->newInstance()->middleware($this->middlewareFactory);            $name = 'attribute__' . $attribute->getName();            $this->middlewares->add($name, $middleware);        }    }}